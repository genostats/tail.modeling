library(PvalueEsti)
library(PvalueEsti)
library(PvalueEsti)
library(PvalueEsti)
calcul_p(zsim=rnorm(1e6),Zobs=5,method="BC")
library(PvalueEsti)
calcul_p(zsim=rnorm(1e6),Zobs=5,method="BC")
PBC_Z<-function(z,Ntot,N,param,Zobs){
p<-seq(N,1)/Ntot
if (missing(param))
lambda <- BoxCox_lm(log(-log(p)),log(z))
else
lambda <- param
coeffs <- lm(  log(-log(p)) ~ BoxCox(log(z),lambda) )$coefficients
plot(log(-log(p)),coeffs[[1]] + BoxCox(log(z),lambda) * coeffs[[2]])
return(list(p = exp(-exp(sum( coeffs*c(1, BoxCox(log(Zobs),lambda))))),
interc = coeffs[[1]],
pente = coeffs[[2]],
lbda = lambda))
}
calcul_p<-function(zsim,Ntail=500,estim=c("PWM","EMV"),Zobs,param,method = c("BC","GPD"),Nperm){
if (length(zsim)< Nperm) #si on a deja les 500 premières valeurs en entrée, on recree une liste de Nperm valeurs
zsim<-c(rep(min(zsim),Nperm-length(zsim)),zsim)
# les Ntail plus grandes valeurs (les dernieres)
z1 <- tail( sort(zsim) , Ntail + 1 )
#seuil pour la GDP
t<-(z1[1] + z1[2])/2
#calcul des excedents de la GDP, ceux qui lui sont superieurs
z1<-z1[-1]
zgpd<-z1-t
zgpd<-zgpd[zgpd>0] #uniquement ceux superieurs au seuil
method<-match.arg(method)
if (method == "BC") {
result<-PBC_Z(z1,length(zsim),Ntail,param,Zobs)
return(list(Pbc_z = result$p,
pente = result$pente,
interc = result$interc,
lbda = result$lbda))
}
if (method =="GPD"){
estim<-match.arg(estim)
result<-PGPD(Zobs,zgpd,zsim,t,estim)
return(list(Pgpd=result$p,
a=result$a,
k=result$k))
}
}
library(PvalueEsti)
load("C:/Users/Marion/Documents/Stage/packageBC/FST_1.RData")
result<-data.frame(matrix(nrow=3,ncol=4))
colnames(result)<-c("Genes","GPD-PWM","GPD-EMV","BC-LS")
result$Genes<-names(FST.1)
View(result)
View(result)
source('~/Stage/packageBC/test_genome.R')
View(result)
PBC_Z<-function(z,Ntot,N,param,Zobs,draw){
p<-seq(N,1)/Ntot
if (missing(param))
lambda <- BoxCox_lm(log(-log(p)),log(z))
else
lambda <- param
coeffs <- lm(  log(-log(p)) ~ BoxCox(log(z),lambda) )$coefficients
if (draw == TRUE)
plot(coeffs[[1]] + BoxCox(log(z),lambda) * coeffs[[2]],log(-log(p)),col="r",main="Linear regression of the Box-Plot method")
return(list(p = exp(-exp(sum( coeffs*c(1, BoxCox(log(Zobs),lambda))))),
interc = coeffs[[1]],
pente = coeffs[[2]],
lbda = lambda))
}
## regroupement des p valeurs des differentes methodes ----
calcul_p<-function(zsim,Ntail=500,estim=c("PWM","EMV"),Zobs,param,method = c("BC","GPD"),Nperm,draw=FALSE){
if (length(zsim)< Nperm) #si on a deja les 500 premières valeurs en entrée, on recree une liste de Nperm valeurs
zsim<-c(rep(min(zsim),Nperm-length(zsim)),zsim)
# les Ntail plus grandes valeurs (les dernieres)
z1 <- tail( sort(zsim) , Ntail + 1 )
#seuil pour la GDP
t<-(z1[1] + z1[2])/2
#calcul des excedents de la GDP, ceux qui lui sont superieurs
z1<-z1[-1]
zgpd<-z1-t
zgpd<-zgpd[zgpd>0] #uniquement ceux superieurs au seuil
method<-match.arg(method)
if (method == "BC") {
result<-PBC_Z(z1,length(zsim),Ntail,param,Zobs,draw)
return(list(Pbc_z = result$p,
pente = result$pente,
interc = result$interc,
lbda = result$lbda))
}
if (method =="GPD"){
estim<-match.arg(estim)
result<-PGPD(Zobs,zgpd,zsim,t,estim)
return(list(Pgpd=result$p,
a=result$a,
k=result$k))
}
}
source('~/Stage/packageBC/test_genome.R')
PBC_Z<-function(z,Ntot,N,param,Zobs,draw){
p<-seq(N,1)/Ntot
if (missing(param))
lambda <- BoxCox_lm(log(-log(p)),log(z))
else
lambda <- param
coeffs <- lm(  log(-log(p)) ~ BoxCox(log(z),lambda) )$coefficients
if (draw == TRUE)
plot(coeffs[[1]] + BoxCox(log(z),lambda) * coeffs[[2]],log(-log(p)),col="red",main="Linear regression of the Box-Plot method")
return(list(p = exp(-exp(sum( coeffs*c(1, BoxCox(log(Zobs),lambda))))),
interc = coeffs[[1]],
pente = coeffs[[2]],
lbda = lambda))
}
source('~/Stage/packageBC/test_genome.R')
library(PvalueEsti)
source('~/Stage/packageBC/test_genome.R')
source('~/Stage/packageBC/test_genome.R')
zsim=gene
Zobs=gene[501]
Nperm = 1e6
draw=T
if (length(zsim)< Nperm) #si on a deja les 500 premières valeurs en entrée, on recree une liste de Nperm valeurs
zsim<-c(rep(min(zsim),Nperm-length(zsim)),zsim)
method="GPD"
estim="PWM"
z1 <- tail( sort(zsim) , Ntail + 1 )
#seuil pour la GDP
t<-(z1[1] + z1[2])/2
#calcul des excedents de la GDP, ceux qui lui sont superieurs
z1<-z1[-1]
zgpd<-z1-t
zgpd<-zgpd[zgpd>0]
Ntail=500
# les Ntail plus grandes valeurs (les dernieres)
z1 <- tail( sort(zsim) , Ntail + 1 )
#seuil pour la GDP
t<-(z1[1] + z1[2])/2
#calcul des excedents de la GDP, ceux qui lui sont superieurs
z1<-z1[-1]
zgpd<-z1-t
zgpd<-zgpd[zgpd>0] #uniquement ceux superieurs au seuil
estim<-match.arg(estim)
result<-PGPD(Zobs,zgpd,zsim,t,estim)
return(list(Pgpd=result$p,
a=result$a,
k=result$k))
estim<-match.arg(estim)
source('~/Stage/packageBC/test_genome.R')
if (length(zsim)< Nperm) #si on a deja les 500 premières valeurs en entrée, on recree une liste de Nperm valeurs
zsim<-c(rep(min(zsim),Nperm-length(zsim)),zsim)
# les Ntail plus grandes valeurs (les dernieres)
z1 <- tail( sort(zsim) , Ntail + 1 )
#seuil pour la GDP
t<-(z1[1] + z1[2])/2
#calcul des excedents de la GDP, ceux qui lui sont superieurs
z1<-z1[-1]
zgpd<-z1-t
zgpd<-zgpd[zgpd>0] #
z1
method<-match.arg(method)
result<-PGPD(Zobs,zgpd,zsim,t,estim)
return(list(Pgpd=result$p,
a=result$a,
k=result$k))
library(PvalueEsti)
result<-PGPD(Zobs,zgpd,zsim,t,estim)
return(list(Pgpd=result$p,
a=result$a,
k=result$k))
result<-PGPD(Zobs,zgpd,zsim,t,estim)
source('~/Stage/packageBC/test_genome.R')
source('~/Stage/packageBC/test_genome.R')
View(result2)
zsim=gene2
Zobs=gene[501]
method="GPD"
estim="PWM"
Nperm = 1e6
draw=T
if (length(zsim)< Nperm) #si on a deja les 500 premières valeurs en entrée, on recree une liste de Nperm valeurs
zsim<-c(rep(min(zsim),Nperm-length(zsim)),zsim)
#
# les Ntail plus grandes valeurs (les dernieres)
z1 <- tail( sort(zsim) , Ntail + 1 )
t<-(z1[1] + z1[2])/2
#calcul des excedents de la GDP, ceux qui lui sont superieurs
z1<-z1[-1]
zgpd<-z1-t
zgpd<-zgpd[zgpd>0] #
PGPD(Zobs,zgpd,zsim,t,estim)
source('~/Stage/packageBC/test_genome.R')
source('~/Stage/packageBC/test_genome.R')
source('~/Stage/packageBC/test_genome.R')
View(result2)
View(result2)
zsim=gene2
length(zsim)< Nperm
# les Ntail plus grandes valeurs (les dernieres)
z1 <- tail( sort(zsim) , Ntail + 1 )
#seuil pour la GDP
t<-(z1[1] + z1[2])/2
#calcul des excedents de la GDP, ceux qui lui sont superieurs
z1<-z1[-1]
zgpd<-z1-t
zgpd<-zgpd[zgpd>0] #uniquement ceux superieurs au seuil
zsim=gene[1:500]
length(zsim)< Nperm
zsim<-c(rep(min(zsim),Nperm-length(zsim)),zsim)
# les Ntail plus grandes valeurs (les dernieres)
z12 <- tail( sort(zsim) , Ntail + 1 )
#seuil pour la GDP
t<-(z12[1] + z12[2])/2
#calcul des excedents de la GDP, ceux qui lui sont superieurs
z12<-z12[-1]
zgpd2<-z12-t
zgpd2<-zgpd2[zgpd2>0] #uniquement ceux superieurs au seuil
diff(z1,z12)
setdiff(z1,z12)
setdiff(zgpd,zgpg2)
setdiff(zgpd,zgpd2)
zsim=gene[1:500]
zsim<-c(rep(min(zsim),Nperm-length(zsim)),zsim)
setdiff(gene2,zsim)
source('~/Stage/packageBC/test_genome.R')
calcul_p<-function(zsim,Ntail=500,estim=c("PWM","EMV"),Zobs,param,method = c("BC","GPD"),Nperm,draw=FALSE){
if (length(zsim)< Nperm) #si on a deja les 500 premières valeurs en entrée, on recree une liste de Nperm valeurs
zsim<-c(rep(min(zsim),Nperm-length(zsim)),zsim)
# les Ntail plus grandes valeurs (les dernieres)
z1<- tail( sort(zsim) , Ntail + 1 )
#seuil pour la GDP
t<-(z1[1] + z1[2])/2
#calcul des excedents de la GDP, ceux qui lui sont superieurs
z1<-z1[-1]
zgpd<-z1-t
zgpd<-zgpd[zgpd>0] #uniquement ceux superieurs au seuil
method<-match.arg(method)
if (method == "BC") {
result<-PBC_Z(z1,length(zsim),Ntail,param,Zobs,draw)
return(list(Pbc_z = result$p,
pente = result$pente,
interc = result$interc,
lbda = result$lbda,
data = length(zsim)))
}
if (method =="GPD"){
estim<-match.arg(estim)
result<-PGPD(Zobs,zgpd,zsim,t,estim)
return(list(Pgpd=result$p,
a=result$a,
k=result$k))
}
}
calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="GPD",
estim="PWM",
Nperm = 1e6,
draw=T)
zsim=gene[1:500]
Zobs=gene[501]
method="GPD"
estim="PWM"
Nperm = 1e6
draw=T
calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="BC",
Nperm = 1e6,
draw=T)
source('~/GitHub/tail.modeling/R/BC_functions.R', encoding = 'UTF-8')
source('~/Stage/packageBC/test_genome.R')
source('~/Stage/packageBC/test_genome.R')
View(result)
View(result)
View(result2)
library(PvalueEsti)
source('~/Stage/packageBC/test_genome.R')
View(result)
source('~/Stage/packageBC/test_genome.R')
source('~/Stage/packageBC/test_genome.R')
View(result)
library(PvalueEsti)
source('~/GitHub/tail.modeling/R/BC_functions.R', encoding = 'UTF-8')
PGPD.1(3,tail(sort(rnorm(1e6)),500),1e6,2,"PWM")
library(PvalueEsti)
result<-FGPD(x0-seuil,zexc,estim)
library(PvalueEsti)
result<-FGPD(x0-seuil,zexc,estim)
library(PvalueEsti)
PGPD.1(3,tail(sort(rnorm(1e6)),500),1e6,2,"PWM")
library(PvalueEsti)
load("C:/Users/Marion/Documents/Stage/packageBC/FST_1.RData")
result<-data.frame(matrix(nrow=3,ncol=4))
colnames(result)<-c("Genes","GPD-PWM","GPD-EMV","BC-LS")
result$Genes<-names(FST.1)
for (i in 1:length(FST.1)){
gene<-FST.1[[i]]
#the observed test stat is the 501th value of gene
#the 500 first are the test statistics got by permutations
result[i,2]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="GPD",
estim="PWM",
Nperm = 1e6,
draw=T)$Pgpd
result[i,3]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="GPD",
estim="EMV",
Nperm=1e6,
draw=T)$Pgpd
result[i,4]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="BC",
Nperm = 1e6,
draw=T)$Pbc_z
}
View(result)
library(PvalueEsti)
PGPD(3,tail(sort(rnorm(1e6)),500),1e6,2,"PWM")
library(PvalueEsti)
PGPD(3,tail(sort(rnorm(1e6)),500),1e6,2,"PWM")
library(PvalueEsti)
library(PvalueEsti)
calcul_p(zsim=rnorm(1e6),Zobs=5,method="BC",Nperm)
calcul_p(zsim=rnorm(1e6),Zobs=5,method="BC")
calcul_p(zsim=rnorm(100),Zobs=5,method="BC")
Q
library(PvalueEsti)
PGPD(3,tail(sort(rnorm(1e6)),500),1e6,2,"PWM")
library(PvalueEsti)
library(PvalueEsti)
load("C:/Users/Marion/Documents/Stage/packageBC/FST_1.RData")
result<-data.frame(matrix(nrow=3,ncol=4))
colnames(result)<-c("Genes","GPD-PWM","GPD-EMV","BC-LS")
result$Genes<-names(FST.1)
for (i in 1:length(FST.1)){
gene<-FST.1[[i]]
#the observed test stat is the 501th value of gene
#the 500 first are the test statistics got by permutations
result[i,2]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="GPD",
estim="PWM",
Nperm = 1e6,
draw=T)$Pgpd
result[i,3]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="GPD",
estim="EMV",
Nperm=1e6,
draw=T)$Pgpd
result[i,4]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="BC",
Nperm = 1e6,
draw=T)$Pbc_z
}
View(result)
library(PvalueEsti)
load("C:/Users/Marion/Documents/Stage/packageBC/FST_1.RData")
result<-data.frame(matrix(nrow=3,ncol=4))
colnames(result)<-c("Genes","GPD-PWM","GPD-EMV","BC-LS")
result$Genes<-names(FST.1)
for (i in 1:length(FST.1)){
gene<-FST.1[[i]]
#the observed test stat is the 501th value of gene
#the 500 first are the test statistics got by permutations
result[i,2]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="GPD",
estim="PWM",
draw=T)$Pgpd
result[i,3]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="GPD",
estim="EMV",
draw=T)$Pgpd
result[i,4]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="BC",
draw=T)$Pbc_z
}
result<-data.frame(matrix(nrow=3,ncol=4))
colnames(result)<-c("Genes","GPD-PWM","GPD-EMV","BC-LS")
result$Genes<-names(FST.1)
for (i in 1:length(FST.1)){
gene<-FST.1[[i]]
#the observed test stat is the 501th value of gene
#the 500 first are the test statistics got by permutations
result[i,2]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="GPD",
estim="PWM",
Nperm = 1e6,
draw=T)$Pgpd
result[i,3]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="GPD",
estim="EMV",
Nperm=1e6,
draw=T)$Pgpd
result[i,4]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="BC",
Nperm = 1e6,
draw=T)$Pbc_z
}
View(result)
library(PvalueEsti)
load("C:/Users/Marion/Documents/Stage/packageBC/FST_1.RData")
result<-data.frame(matrix(nrow=3,ncol=4))
colnames(result)<-c("Genes","GPD-PWM","GPD-EMV","BC-LS")
result$Genes<-names(FST.1)
for (i in 1:length(FST.1)){
gene<-FST.1[[i]]
#the observed test stat is the 501th value of gene
#the 500 first are the test statistics got by permutations
result[i,2]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="GPD",
estim="PWM",
Nperm = 1e6,
draw=T)$Pgpd
result[i,3]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="GPD",
estim="EMV",
Nperm=1e6,
draw=T)$Pgpd
result[i,4]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="BC",
Nperm = 1e6,
draw=T)$Pbc_z
}
View(result)
View(result)
View(result)
View(result)

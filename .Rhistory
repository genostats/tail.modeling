Nperm=1e6,
draw=T)$Pgpd
result[i,4]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="BC",
Nperm = 1e6,
draw=T)$Pbc_z
}
View(result)
View(result)
View(result)
View(result)
library(PvalueEsti)
load("C:/Users/Marion/Documents/Stage/packageBC/FST_1.RData")
result<-data.frame(matrix(nrow=3,ncol=4))
colnames(result)<-c("Genes","GPD-PWM","GPD-EMV","BC-LS")
result$Genes<-names(FST.1)
for (i in 1:length(FST.1)){
gene<-FST.1[[i]]
#the observed test stat is the 501th value of gene
#the 500 first are the test statistics got by permutations
result[i,2]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="GPD",
estim="PWM",
Nperm = 1e6,
draw=T)$Pgpd
result[i,3]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="GPD",
estim="EMV",
Nperm=1e6,
draw=T)$Pgpd
result[i,4]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="BC",
Nperm = 1e6,
draw=T)$Pbc_z
}
View(result)
##Testing Monte Carlo Algorithm
library(EXPERT)
data.input<-FST.1[[2]][1:500]
t.obs<-FST.1[[2]][501]
one_sample_t_test<-function (data.input)
{
t.test(data.input)$statistic[[1]]
}
permute_vector_one<-function (data.input, prop.change) #no update for one sample data
{
data.input
}
SAMC.adapt(data.input,
t.obs,
fun.test.statistic = one_sample_t_test,
fun.proposal=permute_vector_one)
load("C:/Users/Marion/Documents/Stage/packageBC/FST_1.RData")
View(FST.1)
z <- rnorm(1e6)
sum(z > 5.1)
z <- rnorm(1e6, sd = 3)
sum(z > 5.1)
w <- dnorm(z) / dnorm(sd = 3)
w <- dnorm(z) / dnorm(z, sd = 3)
sum(w*as.integer(z > 5.1)) / length(z)
pnorm(5.1, lower.tail = FALSE)
library(PvalueEsti)
library(PvalueEsti)
load("C:/Users/Marion/Documents/Stage/packageBC/FST5_50.RData")
result<-data.frame(matrix(nrow=3,ncol=4))
colnames(result)<-c("Genes","GPD-PWM","GPD-EMV","BC-LS")
result$Genes<-names(FST.1)
for (i in 1:length(FST.1)){
gene<-FST.1[[i]]
#the observed test stat is the 501th value of gene
#the 500 first are the test statistics got by permutations
result[i,2]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="GPD",
estim="PWM",
Nperm = 1e6,
draw=T)$Pgpd
result[i,3]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="GPD",
estim="EMV",
Nperm=1e6,
draw=T)$Pgpd
result[i,4]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="BC",
Nperm = 1e6,
draw=T)$Pbc_z
}
View(result)
length(FST.1)
result<-data.frame(matrix(nrow=length(FST.1),ncol=4))
colnames(result)<-c("Genes","GPD-PWM","GPD-EMV","BC-LS")
result$Genes<-names(FST.1)
for (i in 1:length(FST.1)){
gene<-FST.1[[i]]
#the observed test stat is the 501th value of gene
#the 500 first are the test statistics got by permutations
result[i,2]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="GPD",
estim="PWM",
Nperm = 1e6,
draw=T)$Pgpd
result[i,3]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="GPD",
estim="EMV",
Nperm=1e6,
draw=T)$Pgpd
result[i,4]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="BC",
Nperm = 1e6,
draw=T)$Pbc_z
}
gene<-FST.1[[i]]
#the observed test stat is the 501th value of gene
#the 500 first are the test statistics got by permutations
result[i,2]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="GPD",
estim="PWM",
Nperm = 1e6,
draw=T)$Pgpd
result[i,3]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="GPD",
estim="EMV",
Nperm=1e6,
draw=T)$Pgpd
result[i,4]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="BC",
Nperm = 1e6,
draw=T)$Pbc_z
View(result)
i<-2
gene<-FST.1[[i]]
result[i,4]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="BC",
Nperm = 1e6,
draw=T)$Pbc_z
load("C:/Users/Marion/Documents/Stage/packageBC/FST_1.RData")
result<-data.frame(matrix(nrow=length(FST.1),ncol=4))
colnames(result)<-c("Genes","GPD-PWM","GPD-EMV","BC-LS")
result$Genes<-names(FST.1)
for (i in 1:length(FST.1)){
gene<-FST.1[[i]]
#the observed test stat is the 501th value of gene
#the 500 first are the test statistics got by permutations
result[i,2]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="GPD",
estim="PWM",
Nperm = 1e6,
draw=T)$Pgpd
result[i,3]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="GPD",
estim="EMV",
Nperm=1e6,
draw=T)$Pgpd
result[i,4]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="BC",
Nperm = 1e6,
draw=T)$Pbc_z
}
load("C:/Users/Marion/Documents/Stage/packageBC/FST5_50.RData")
load("C:/Users/Marion/Documents/Stage/packageBC/FST5_50.RData")
length(FST.1)
library(PvalueEsti)
load("C:/Users/Marion/Documents/Stage/packageBC/FST5_50.RData")
result<-data.frame(matrix(nrow=length(FST.1),ncol=4))
colnames(result)<-c("Genes","GPD-PWM","GPD-EMV","BC-LS")
result$Genes<-names(FST.1)
View(result)
i<-1
gene<-FST.1[[i]]
gene
#the observed test stat is the 501th value of gene
#the 500 first are the test statistics got by permutations
result[i,2]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="GPD",
estim="PWM",
Nperm = 1e6,
draw=T)$Pgpd
result[i,3]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="GPD",
estim="EMV",
Nperm=1e6,
draw=T)$Pgpd
result[i,4]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="BC",
Nperm = 1e6,
draw=T)$Pbc_z
warnings()
i<_4
i<-4
gene<-FST.1[[i]]
result[i,4]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="BC",
Nperm = 1e6,
draw=T)$Pbc_z
for (i in 3:length(FST.1)){
gene<-FST.1[[i]]
#the observed test stat is the 501th value of gene
#the 500 first are the test statistics got by permutations
result[i,2]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="GPD",
estim="PWM",
Nperm = 1e6,
draw=T)$Pgpd
result[i,3]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="GPD",
estim="EMV",
Nperm=1e6,
draw=T)$Pgpd
result[i,4]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="BC",
Nperm = 1e6,
draw=T)$Pbc_z
}
warnings()
for (i in 6:length(FST.1)){
gene<-FST.1[[i]]
#the observed test stat is the 501th value of gene
#the 500 first are the test statistics got by permutations
result[i,2]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="GPD",
estim="PWM",
Nperm = 1e6,
draw=T)$Pgpd
result[i,3]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="GPD",
estim="EMV",
Nperm=1e6,
draw=T)$Pgpd
result[i,4]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="BC",
Nperm = 1e6,
draw=T)$Pbc_z
}
for (i in 1:length(FST.1)){
gene<-FST.1[[i]]
#the observed test stat is the 501th value of gene
#the 500 first are the test statistics got by permutations
result[i,2]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="GPD",
estim="PWM",
Nperm = 1e6,
draw=T)$Pgpd
result[i,3]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="GPD",
estim="EMV",
Nperm=1e6,
draw=T)$Pgpd
result[i,4]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="BC",
Nperm = 1e6,
draw=T)$Pbc_z
}
for (i in 1:length(FST.1)){
gene<-FST.1[[i]]
#the observed test stat is the 501th value of gene
#the 500 first are the test statistics got by permutations
result[i,2]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="GPD",
estim="PWM",
Nperm = 1e6,
draw=T)$Pgpd
result[i,3]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="GPD",
estim="EMV",
Nperm=1e6,
draw=T)$Pgpd
result[i,4]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="BC",
Nperm = 1e6,
draw=T)$Pbc_z
}
warnings()
i<-1
gene<-FST.1[[i]]
zsim=gene[1:500]
Zobs=gene[501]
method="BC"
Nperm = 1e6
draw=T
Ntail=500
estim=c("PWM","EMV")
Nperm = length(zsim)
if(length(zsim) < Ntail)
stop("Ntail can't be larger than length(zsim)")
length(zsim) < Ntail
# les Ntail plus grandes valeurs (les dernieres)
z1 <- tail( sort(zsim) , Ntail )
result <- PBC_Z(z1, Nperm, Ntail, param, Zobs, draw)
source('~/GitHub/tail.modeling/R/BC_functions.R', encoding = 'UTF-8')
result <- PBC_Z(z1, Nperm, Ntail, param, Zobs, draw)
p <- seq(N,1)/Ntot
z=z1
Ntot=1e6
N=500
p <- seq(N,1)/Ntot
lambda <- BoxCox_lm(log(-log(p)),log(z))
warnings()
coeffs <- lm(  log(-log(p)) ~ BoxCox(log(z),lambda) )$coefficients
lm(  log(-log(p)) ~ BoxCox(log(z),lambda) )$coefficients
log(-log(p))
BoxCox(log(z),lambda)
lambda <- BoxCox_lm(log(-log(p)),log(z))
log(z)
(z^lambda - 1)/lambda
z=log(z)
(z^lambda - 1)/lambda
z=z1
lambda <- BoxCox_lm(log(-log(p)),log(z))
BoxCox(log(z),lambda)
z=log(z)
z^lambda
i<-3
gene<-FST.1[[i]]
zsim=gene[1:500]
gene[501]
Zobs=gene[501]
method="BC"
Nperm = 1e6
draw=T
# les Ntail plus grandes valeurs (les dernieres)
z1 <- tail( sort(zsim) , Ntail )
z=z1
p <- seq(N,1)/Ntot
lambda <- BoxCox_lm(log(-log(p)),log(z))
BoxCox(log(z),lambda)
z=log(z)
i<-1
gene<-FST.1[[i]]
zsim=gene[1:500]
# les Ntail plus grandes valeurs (les dernieres)
z1 <- tail( sort(zsim) , Ntail )
length(log(z1) <= 0)
log(z1)
library(PvalueEsti)
result[i,4]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="BC",
Nperm = 1e6,
draw=T)$Pbc_z
library(PvalueEsti)
load("C:/Users/Marion/Documents/Stage/packageBC/FST5_50.RData")
result<-data.frame(matrix(nrow=length(FST.1),ncol=4))
colnames(result)<-c("Genes","GPD-PWM","GPD-EMV","BC-LS")
result$Genes<-names(FST.1)
i<-1
gene<-FST.1[[i]]
result[i,4]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="BC",
Nperm = 1e6,
draw=T)$Pbc_z
View(result)
for (i in 1:length(FST.1)){
gene<-FST.1[[i]]
#the observed test stat is the 501th value of gene
#the 500 first are the test statistics got by permutations
result[i,2]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="GPD",
estim="PWM",
Nperm = 1e6,
draw=T)$Pgpd
result[i,3]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="GPD",
estim="EMV",
Nperm=1e6,
draw=T)$Pgpd
result[i,4]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="BC",
Nperm = 1e6,
draw=T)$Pbc_z
}
library(PvalueEsti)
load("C:/Users/Marion/Documents/Stage/packageBC/FST5_50.RData")
result<-data.frame(matrix(nrow=length(FST.1),ncol=4))
colnames(result)<-c("Genes","GPD-PWM","GPD-EMV","BC-LS")
result$Genes<-names(FST.1)
i<-3
gene<-FST.1[[i]]
result[i,4]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="BC",
Nperm = 1e6,
draw=T)$Pbc_z
View(result)
zsim=gene[1:500]
# les Ntail plus grandes valeurs (les dernieres)
z1 <- tail( sort(zsim) , Ntail )
Ntail=500
# les Ntail plus grandes valeurs (les dernieres)
z1 <- tail( sort(zsim) , Ntail )
length(log(z1) <= 0)
log(z1)
log(z1)[log(z1)<=0]
ength(log(z1)[log(z1)<=0])
length(log(z1)[log(z1)<=0])
library(PvalueEsti)
load("C:/Users/Marion/Documents/Stage/packageBC/FST5_50.RData")
result<-data.frame(matrix(nrow=length(FST.1),ncol=4))
colnames(result)<-c("Genes","GPD-PWM","GPD-EMV","BC-LS")
result$Genes<-names(FST.1)
i<-3
gene<-FST.1[[i]]
result[i,4]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="BC",
Nperm = 1e6,
draw=T)$Pbc_z
View(result)
for (i in 1:length(FST.1)){
gene<-FST.1[[i]]
#the observed test stat is the 501th value of gene
#the 500 first are the test statistics got by permutations
result[i,2]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="GPD",
estim="PWM",
Nperm = 1e6,
draw=T)$Pgpd
result[i,3]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="GPD",
estim="EMV",
Nperm=1e6,
draw=T)$Pgpd
result[i,4]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="BC",
Nperm = 1e6,
draw=T)$Pbc_z
}
View(result)
for (i in 1:length(FST.1)){
gene<-FST.1[[i]]
#the observed test stat is the 501th value of gene
#the 500 first are the test statistics got by permutations
result[i,2]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="GPD",
estim="PWM",
Nperm = 1e6,
draw=T)$Pgpd
result[i,3]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="GPD",
estim="EMV",
Nperm=1e6,
draw=T)$Pgpd
result[i,4]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="BC",
Nperm = 1e6,
draw=F)$Pbc_z
}
warnings()
for (i in 1:length(FST.1)){
gene<-FST.1[[i]]
#the observed test stat is the 501th value of gene
#the 500 first are the test statistics got by permutations
result[i,2]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="GPD",
estim="PWM",
Nperm = 1e6,
draw=T)$Pgpd
result[i,3]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="GPD",
estim="EMV",
Nperm=1e6,
draw=T)$Pgpd
result[i,4]<-calcul_p(zsim=gene[1:500],
Zobs=gene[501],
method="BC",
Nperm = 1e6,
draw=F)$Pbc_z
}
